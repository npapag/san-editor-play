<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml"
				xmlns:ravis="org.un.cava.birdeye.ravis.graphLayout.visual.*"
				width="100%" height="100%" 
				xmlns:s="library://ns.adobe.com/flex/spark"
				xmlns:visual="org.un.cava.birdeye.ravis.enhancedGraphLayout.visual.*" 
				xmlns:lc="org.un.cava.birdeye.ravis.components.ui.controls.layouterControls.*"
				xmlns:vc="org.un.cava.birdeye.ravis.components.ui.controls.vgraphControls.*"
				xmlns:ui="org.un.cava.birdeye.ravis.components.ui.*"
				xmlns:dp="org.un.cava.birdeye.ravis.components.ui.dataPresentation.*"
				xmlns:controls="org.un.cava.birdeye.ravis.enhancedGraphLayout.ui.controls.*"
				xmlns:flexlib="http://code.google.com/p/flexlib/"
				backgroundGradientColors="[#003300,#990000]"
				layout="absolute" creationComplete="init();"
				creationPolicy="all" xmlns:local="*" xmlns:gui="gui.*" >
	
	<mx:Script>
		<![CDATA[			
			import mx.managers.ToolTipManager;
			
			import util.*;
			
			[Embed(source="assets/imgs/PLAYlogo.png")]
			[Bindable]
			public var playImg:Class;
			
			[Embed(source="assets/imgs/IMUlogoT.png")]
			[Bindable]
			public var imuImg:Class;
			
			[Bindable]
			public var logoCls:Class;			
			public var server:Server = null;
			
			var udataSO:SharedObject;
						
			private function init():void {
				trace("MAIN:init");
				this.setAppSkin("IMU");
				//start server communication object
				server = new util.Server();
				//this.addEventListener(MouseEvent.CLICK, clickHandler); //destroys focus as it is : TODO try application.application
				this.addEventListener(KeyboardEvent.KEY_DOWN,keyPressed);
				//focusManager.setFocus(txtUser);
				ToolTipManager.toolTipClass = HTMLToolTip;
				ToolTipManager.showDelay = 0;				
				ToolTipManager.hideDelay = 5000;
				
				contextMenu.hideBuiltInItems();
				/*
				var customItem:ContextMenuItem = new ContextMenuItem("Edit");
				contextMenu.customItems.push(customItem);
				customItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemHandler);
				*/
				//trace(util.EmbeddedConfig.getAppConfig());
				//Application.application.enabled = false;
				//new util.ExternalConfig("config/external-config.xml",configLoaded);
				
				//DEBUG EVENTs :
				systemManager.addEventListener(Event.CHANGE, eventTracer, true);
				//Load user data LSO
				//loadUserData();
			}
			/*
			private function loadUserData():void {
				udataSO = SharedObject.getLocal("udata");
				
			}
			
			public function getLastSANFileLoaded():String {
				if (udataSO.data.sanFile==null) {
					return null;
				} else {
					return udataSO.data.sanFile as String;						
				}	
			}
			public function setLastSANFileLoaded(fileName:String):void {
				udataSO.data.sanFile = fileName;
				udataSO.flush();
			}
			*/
						
			private function menuItemHandler(event:ContextMenuEvent) : void{
				trace(event);
				mx.controls.Alert.show("You clicked on menu entry " + event.currentTarget.caption);
			}
									
			private function eventTracer(event:Event):void
			{
				trace("Got ", event.type, "from", event.target, "as",
					getQualifiedClassName(event));
			}
			
			private function onLogin():void { //Dummy login mechanism
				var pattern:RegExp  = /play/i;				
				var pattern2:RegExp = /imu/i;
				//trace(str.search(pattern)); // 0
				if (this.txtPass.text.search(pattern)>=0) {					
					this.setAppSkin("PLAY");
					this.vstackMain.selectedIndex = 1;
				}
				else
				if (this.txtPass.text.search(pattern2)>=0) {
					this.setAppSkin("IMU");
					this.vstackMain.selectedIndex = 1;
				}
				else {
					//*** for debug only **** remove
					this.setAppSkin("PLAY");
					this.vstackMain.selectedIndex = 1;
					//*** for debug only **** replace with :
					//mx.controls.Alert.show("Unknown user name or bad password");
				}
			}
			
			private function setAppSkin(name:String):void {
				trace("APP"+name);
				switch (name) {
					case "PLAY":
						this.logoCls = this.playImg;
						//this.imgLogo.width = 100;
						//this.imgLogo.height = 100;						
						hbLogo.setStyle("paddingLeft", 2);
						this.imgLogo.scaleX = 1.0;
						this.imgLogo.scaleY = 1.0;
						this.setStyle("backgroundGradientColors",[0x003300, 0x990000]);
						//mx.styles.StyleManager.getStyleDeclaration("Button").setStyle("color", 0x003300);						
						mx.styles.StyleManager.
						getStyleDeclaration("Button").
						setStyle("fillColors", [0x008011, 0x008011, 0x007508, 0x007508]);
						//setStyle("fillColors", [0x00C011, 0x00C011, 0x005508, 0x005508]);
						//fillColors: #047BC0, #047BC0, #006198, #006198;						
						break;
					case "IMU":
						this.logoCls = this.imuImg;
						hbLogo.setStyle("paddingLeft", 20);
						this.setStyle("backgroundGradientColors",[0x003377, 0x990000]);
						//mx.styles.StyleManager.getStyleDeclaration("Button").setStyle("color", 0x003377); //this is text color
						mx.styles.StyleManager.
						getStyleDeclaration("Button").
						setStyle("fillColors", [0x047BC0, 0x047BC0, 0x006198, 0x006198]);
						//this.imgLogo.X = 30;
						this.imgLogo.scaleX = 0.6;
						this.imgLogo.scaleY = 0.45;						
						//this.imgLogo.height = 100;
						break;
					default:
						this.logoCls = this.imuImg;						
						this.setStyle("backgroundGradientColors",[0x003377, 0x990000]);
				}
				
			}
			
			private function clickHandler(event:MouseEvent):void {
				stage.focus = this;
			}
			
			private function keyPressed(evt:KeyboardEvent):void{
				if(evt.ctrlKey && evt.keyCode == 80) {
					trace("CTRL P is pressed");					
					setAppSkin("PLAY");
					this.vstackMain.selectedIndex = 1;
				}				
				if(evt.ctrlKey && evt.keyCode == 73)				
				{
					trace("CTRL I is pressed");
					setAppSkin("IMU");
					this.vstackMain.selectedIndex = 1;
				}
				trace("Keycode:" + evt.keyCode);
			}
			
			/*
			public function previewSAN(sanXML:XML,selectedSANIndex:int,sitAsNode:Boolean,condAsNode:Boolean):void {
				this.viewer.renderSAN(sanXML,selectedSANIndex,sitAsNode,condAsNode);
				this.tabAppPanels.selectedIndex = 1;
			}*/
			
			
		]]>
	</mx:Script>			
	
	<mx:XML id="appStaticDataXML" source="config/app-static-data.xml" />
	
	<mx:Style source="styles/main.css" />
	<mx:WipeRight id="wipeOut" duration="1000"/>
	<mx:WipeRight id="wipeIn" duration="1000"/>
	
	<mx:Move id="hideEffect"
			 xTo="{-Application.application.width}" />
	<mx:Move id="showEffect" 
			 xFrom="{Application.application.width}" />
			
	<mx:ViewStack id="vstackMain" height="100%" width="100%" creationPolicy="all" >
		<mx:VBox id="vboxLOGIN" height="100%" width="100%" horizontalAlign="center" verticalAlign="middle">						
			<mx:Form id="formLogin" defaultButton="{btLogin}" fontSize="14" cornerRadius="5"						  
					 >
				<mx:FormItem label="Username:" color="#F6FAFB">
					<mx:TextInput id="txtUser" width="100" maxChars="128"
								  click="{focusManager.setFocus(txtUser);}"
								  cornerRadius="4" color="#030303"/>
				</mx:FormItem>
				<mx:FormItem label="Password:" color="#FBFCFC">
					<mx:TextInput id="txtPass" width="100" maxChars="128" 
								  displayAsPassword="true" click="{focusManager.setFocus(txtPass);}"									  									  									  
								  color="#030303"/>
					<!--
					focusIn="txtPass.displayAsPassword = false;"
					focusOut="txtPass.displayAsPassword = true;"
					-->
				</mx:FormItem>
				<mx:Button id="btLogin" label="Login" click="onLogin();"  cornerRadius="4"/>
			</mx:Form>
		</mx:VBox>
		<mx:Canvas id="vboxLoggedIn" width="100%" height="100%">
			<mx:ApplicationControlBar  width="500" height="50" paddingTop="5" right="5" y="5">
				<mx:HBox id="hbLogo" width="100%" verticalAlign="middle" paddingLeft="2" paddingRight="2" horizontalAlign="left" >
					<mx:Image id="imgLogo" source="{logoCls}"  height="60%" width="100%"
							  hideEffect="{wipeOut}" showEffect="{wipeIn}"
							  />
					<mx:Label text="Situation-Action Network Manager" color="#FFFFFF" fontSize="22" />
				</mx:HBox>
			</mx:ApplicationControlBar>
			<mx:VBox id="vboxMAIN" name="MAIN"
					 horizontalAlign="center" verticalAlign="top" 
					 paddingLeft="0" paddingRight="0" paddingTop="0" paddingBottom="0" right="0" left="0" bottom="0" top="0">		
				<mx:VBox width="100%" height="100%" verticalGap="3" cornerRadius="15"  >			
					<mx:Spacer height="20" />			
					<mx:TabNavigator id="tabAppPanels"  
									 width="100%" 
									 height="100%"  
									 tabHeight="35" tabWidth="105"							 
									 styleName="appTabNavigator"							  							 
									 >
						<!--click="{styleSelTab();}"-->
						<!-- selectedTabTextStyleName="MySelectedTab" -->
						<gui:Editor id="editor" width="100%" height="100%" label="EDIT" 
										  hideEffect="{hideEffect}" showEffect="{showEffect}"
										  borderColor="#144C28" themeColor="#085A1C"/>
						<gui:SANTreeViewer id="viewer" width="100%" height="100%" label="MONITOR"
											 hideEffect="{hideEffect}" showEffect="{showEffect}"/>
						<gui:SANManager id="manager" width="100%" height="100%" label="MANAGE" 
										  hideEffect="{hideEffect}" showEffect="{showEffect}"
										  />				
					</mx:TabNavigator>									
				</mx:VBox>
			</mx:VBox>
		</mx:Canvas>				
	</mx:ViewStack>
			
</mx:Application>